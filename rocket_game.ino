
// Scope Invaders!

const bool DEBUG = false;

const byte FIGURE_DELAY = 1; // trace delay in uS. adjust if needed
const int LOOP_DELAY = 1;

const int X_INPUT = A0; // Input pin for X controller
const int Y_INPUT = A1; // Input pin for Y controller
const int RESET_BUTTON = A2; // Input pin for reset button
const int DAC_SCALE = 2; // number of bits to right shift to convert from analogue input to DAC output (e.g. if analogue i/p is 10 bits and DAC o/pis 7 bits then set this to 3)

const int FRAME_TIME = 20;
const int SPLASH_TIME = 3000; // milliseconds to show splash screen

typedef struct button
{
  int pin;
  bool currentState;
  bool lastState; 
} ;

button buttons[] = { {RESET_BUTTON, LOW, LOW},};

typedef struct objectData
{
  int x;
  int y;
  bool active;
};

const byte NUM_LASERS = 10;
objectData laser[NUM_LASERS];

typedef struct enemyData
{
  int x;
  int y;
  bool active;
  byte width; 
  
};

const byte NUM_ENEMIES = 8;
enemyData enemies[NUM_ENEMIES];

int analogueX, analogueY;
bool currentState = LOW;
bool lastState = LOW;
unsigned long nextFrame = 0;

// Scope Invaders! splash
const int NUM_POINTS = 1100;
const byte x_points[NUM_POINTS] PROGMEM = {209,33,32,32,31,31,30,30,29,28,28,27,26,25,25,24,23,22,22,21,21,21,21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,22,22,23,24,25,27,28,29,30,31,31,32,32,33,33,34,35,36,37,39,40,40,41,42,42,42,42,42,42,42,43,43,43,43,43,43,42,42,42,42,41,41,41,40,39,39,38,36,35,34,33,32,31,31,30,30,29,29,29,28,28,27,27,26,25,24,56,55,55,54,53,53,53,52,52,52,52,52,52,52,51,51,51,51,50,50,50,50,50,50,50,50,51,51,51,51,51,52,52,52,53,53,54,54,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,74,74,74,74,74,80,79,78,78,77,76,75,75,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,76,77,78,80,81,82,83,84,85,86,87,88,89,91,93,94,95,96,97,97,98,98,98,98,98,98,98,97,96,95,95,94,93,92,91,90,89,87,86,85,84,83,83,82,83,83,84,105,105,105,106,106,106,107,107,108,108,109,109,110,111,111,112,113,113,113,103,103,103,103,103,104,104,104,105,105,105,106,107,108,110,112,114,115,116,117,118,119,120,120,121,121,121,121,120,119,118,117,116,115,114,113,112,111,109,108,107,106,134,136,137,138,139,139,140,140,141,141,141,141,141,140,140,139,139,138,138,137,137,136,136,135,134,133,133,131,130,129,128,127,126,125,125,125,124,124,124,124,124,124,125,125,126,127,128,130,132,135,137,140,143,146,148,151,154,157,47,48,48,49,50,50,50,51,51,51,52,52,52,52,52,52,52,52,52,52,52,53,53,53,54,54,54,54,55,55,55,55,55,67,68,69,70,70,71,71,72,72,72,72,71,71,71,70,70,70,69,69,68,67,67,66,66,65,64,64,64,64,64,64,64,65,65,66,66,67,68,69,69,70,71,72,72,73,74,75,75,76,77,79,80,81,83,84,84,85,86,86,86,86,86,91,93,94,95,96,96,97,98,99,100,101,101,102,103,103,103,103,103,103,103,103,103,103,104,104,104,104,105,105,105,106,106,107,120,118,117,116,116,115,115,114,114,113,113,113,113,112,112,112,112,112,112,112,113,113,114,115,115,116,117,117,118,119,120,121,121,122,123,123,124,124,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,127,127,128,129,130,132,134,135,136,137,138,144,143,142,142,142,141,141,140,140,139,139,139,139,140,141,142,143,144,145,146,147,148,148,149,150,150,151,151,151,151,150,150,150,150,150,150,149,149,148,148,148,147,147,146,146,146,145,146,146,146,146,147,147,148,148,149,150,152,154,155,157,158,159,161,163,165,166,167,168,174,175,176,176,177,178,178,178,178,177,177,177,176,175,174,173,172,171,170,169,168,168,168,167,167,167,166,166,165,165,164,164,164,165,165,166,167,168,169,171,173,175,177,179,180,182,184,186,187,189,191,191,193,194,196,197,198,199,200,200,200,200,199,199,198,198,197,196,194,193,191,190,189,189,188,188,189,189,189,190,190,191,192,194,195,197,198,205,203,202,201,201,200,201,201,202,203,205,206,208,209,210,211,212,214,216,217,218,219,220,220,220,220,220,219,219,218,217,216,215,213,212,221,221,221,222,222,222,222,223,223,224,225,225,226,227,228,228,229,229,230,230,230,231,231,231,231,231,231,232,232,232,233,233,233,233,233,233,233,233,233,233,233,233,233,233,239,240,240,241,241,242,242,243,243,243,243,243,243,243,242,242,241,240,239,238,237,236,235,234,233,233,232,232,232,233,234,235,237,238,239,240,241,241,241,240,240,239,238,236,235,234,234,233,233,233,232,64,65,65,65,65,66,66,66,67,67,68,68,69,69,70,70,70,71,71,72,72,73,73,74,74,74,74,75,75,75,76,76,76,76,77,77,78,78,79,79,80,80,81,81,81,82,83,83,84,84,84,85,85,86,86,86,87,88,88,89,90,91,91,92,92,93,94,94,95,95,95,96,96,96,97,97,98,99,100,100,101,102,102,103,104,104,105,105,106,106,106,107,107,108,108,109,110,111,112,112,113,114,115,115,116,117,117,118,118,118,119,119,120,120,121,122,123,123,124,125,125,126,127,127,128,128,129,130,131,132,132,133,134,135,136,136,137,137,138,139,139,140,141,142,143,144,145,145,146,147,147,148,148,149,149,150,150,151,152,152,153,154,155,156,156,157,158,158,159,159,160,160,161,162,163,164,165,166,166,167,168,168,169,170,170,170,171,171,172,173,173,174,175,176,177,177,178,179,179,180,180,181,181,181,182,183,183,184,185,186,187,188,188,189,190,190,191,191,192,192,193,194,195,196,197,197,198,199,200,200,201,201,202,202,202,203,204,204,205,206,207,207,208,209,209,210,211,211,212,212,213,213,214,214,215,216,216,217,217,218,218};
const byte y_points[NUM_POINTS] PROGMEM = {107,54,55,55,55,55,56,56,56,56,57,57,58,58,59,59,60,60,61,61,62,62,62,63,63,64,64,65,66,67,68,69,70,71,72,73,74,74,74,75,75,75,75,76,76,75,75,75,74,74,74,73,73,73,73,73,73,73,73,72,72,72,72,71,71,71,71,72,72,73,73,74,75,76,77,78,79,80,81,82,82,83,83,84,84,84,85,85,86,87,88,89,90,91,92,93,93,94,94,95,95,95,96,97,98,98,99,99,63,63,63,63,64,64,65,65,66,67,68,69,70,70,71,72,72,73,73,74,74,75,76,77,78,80,81,82,82,83,84,84,84,85,85,85,85,85,85,84,84,83,83,83,82,82,81,80,79,78,77,76,75,74,73,73,72,72,72,60,61,61,61,61,62,62,62,63,63,64,64,65,66,67,68,70,71,72,72,73,74,74,75,75,76,76,77,78,78,79,80,80,81,81,80,79,78,77,76,75,73,73,72,71,71,70,69,68,67,65,64,63,62,62,61,61,60,60,60,60,60,60,60,60,60,61,61,62,63,63,65,66,69,70,72,73,74,76,78,80,82,83,84,85,86,88,89,90,91,92,93,60,60,59,59,57,56,55,53,52,51,50,50,49,49,49,49,49,49,49,49,50,50,51,51,52,54,55,57,59,60,62,63,64,64,65,66,67,68,68,69,70,70,60,59,58,56,54,53,51,50,49,49,48,47,46,46,45,45,44,44,43,43,43,43,43,43,44,44,45,46,46,47,48,49,50,51,52,53,54,55,56,58,60,61,62,63,64,65,66,67,68,69,68,67,66,64,63,61,58,56,119,120,121,122,124,125,125,126,127,127,128,129,129,130,132,133,134,135,136,136,137,138,138,139,139,139,140,141,141,142,144,145,145,130,132,133,134,135,136,136,137,137,138,138,138,138,137,137,136,136,135,134,133,132,131,129,128,126,125,124,123,122,121,120,120,119,118,117,116,115,115,115,114,114,114,115,115,115,116,117,118,119,120,121,123,124,125,125,126,127,127,127,128,128,129,117,118,119,121,122,123,124,124,125,125,125,125,125,125,124,124,123,121,119,117,116,114,113,111,109,107,105,103,102,101,101,100,99,103,104,104,104,104,104,105,105,105,105,105,105,106,106,107,108,109,111,112,113,114,115,116,116,116,117,117,117,117,117,116,116,115,114,114,113,111,110,108,107,106,104,104,103,102,101,101,100,101,101,102,102,103,103,104,104,105,106,107,109,110,111,112,112,113,112,98,98,99,100,100,101,102,103,104,105,105,106,107,108,108,109,110,111,112,112,112,112,112,112,111,110,108,107,106,104,103,102,100,99,97,95,93,91,90,89,87,85,83,82,82,81,81,81,82,82,83,83,84,85,87,89,91,92,94,96,99,101,103,105,105,106,106,106,106,96,95,94,93,92,91,90,89,88,87,86,85,84,84,83,83,82,82,82,82,83,83,84,85,85,86,87,88,89,91,92,93,94,94,95,97,98,100,102,103,104,104,104,104,103,102,100,98,96,94,90,91,93,94,94,95,95,95,95,95,94,94,94,93,93,93,92,91,89,87,85,84,82,81,81,80,79,79,78,77,77,76,76,76,76,77,77,72,72,73,74,75,76,77,78,79,80,81,82,83,83,83,83,83,83,82,82,82,82,83,83,84,85,86,88,90,91,93,94,94,95,95,59,60,60,61,61,61,62,62,62,63,63,64,64,65,66,66,67,68,69,70,70,71,71,72,72,72,73,73,73,74,74,74,75,75,76,76,77,77,78,78,79,79,80,79,92,91,91,91,91,91,92,93,93,94,94,95,96,97,98,98,99,99,99,99,99,98,98,97,97,96,95,94,94,93,93,92,92,92,92,92,93,93,94,95,96,97,98,99,99,100,100,99,99,98,97,172,171,170,170,169,169,169,168,168,168,168,168,168,168,168,168,167,167,167,167,167,167,166,166,166,165,165,165,164,164,163,163,163,162,162,162,161,161,160,160,160,159,159,159,158,158,158,158,157,157,157,157,157,156,156,156,156,156,156,156,156,155,155,155,154,154,153,153,153,152,152,152,151,151,150,150,149,148,148,148,147,147,147,147,147,147,147,147,147,147,146,146,146,146,146,146,146,145,145,145,145,145,145,144,144,143,143,143,142,142,141,141,141,140,140,140,139,139,138,138,137,137,137,137,136,136,136,136,136,136,136,136,136,136,136,135,135,135,135,135,134,134,134,134,134,133,133,133,132,132,132,131,131,130,130,129,129,128,128,128,127,127,127,126,126,126,126,126,126,125,125,125,125,125,125,125,125,125,125,125,124,124,124,124,124,123,123,123,123,122,122,121,121,121,120,120,120,119,119,118,118,118,118,117,117,117,116,116,116,115,115,115,115,115,115,115,115,115,114,114,114,114,114,114,114,114,114,114,114,114,113,113,113,112,112,112,111,111,111,111,110,110,110,110,109,109,108,108,107,107,107,106,106,106,106,105,105,105,105,105,105};

//Rocket

//const int NUM_POINTS_3 = 323;
//const byte x_points3[] PROGMEM = {24,24,22,22,24,26,25,23,21,21,23,25,27,26,24,22,20,20,22,24,26,28,27,25,23,21,19,18,20,22,24,26,28,30,28,26,24,22,20,18,17,19,21,23,25,27,29,30,28,26,24,22,20,18,18,20,22,24,26,28,15,15,30,32,34,32,30,16,14,13,15,17,29,31,33,35,33,31,29,17,15,13,12,14,16,18,28,30,32,34,36,34,32,30,28,18,16,14,12,10,12,14,16,18,20,28,30,32,34,36,37,35,33,31,29,27,20,18,16,14,12,10,10,12,14,16,18,20,26,28,30,32,34,36,38,37,35,33,31,29,27,25,21,19,17,15,13,11,9,9,11,13,15,17,19,21,25,27,29,31,33,35,37,38,36,34,32,30,28,26,20,18,16,14,12,10,6,8,40,42,40,8,6,5,7,9,39,41,43,41,39,37,8,6,4,4,6,8,10,38,40,42,44,42,40,38,36,10,8,6,4,2,4,6,8,10,36,38,40,42,44,45,43,41,39,37,35,11,9,7,5,3,1,3,5,7,9,11,35,37,39,41,43,45,46,44,42,40,38,36,34,12,10,8,6,4,2,0,2,4,6,8,10,12,34,36,38,40,42,44,46,47,45,43,41,39,37,35,13,11,9,7,5,3,1,2,5,7,10,12,20,24,28,36,39,41,44,30,28,26,24,22,20,18,17,29,30,18,18,29,19,19,27,27,20,26,26,21,25,25,23,22,24};
//const byte y_points3[] PROGMEM = {0,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,14,15,15,15,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,29,29,29,30,30,30,30,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,43,43,44,44,45,45,46,47,47,48,49,49,50,51,51,52,52,53,53};

//const int NUM_POINTS_3 = 646;
//const byte x_points3[] PROGMEM = {23,24,25,24,23,22,21,22,23,24,25,26,26,25,24,23,22,21,20,21,22,23,24,25,26,27,27,26,25,24,23,22,21,20,19,20,21,22,23,24,25,26,27,28,28,27,26,25,24,23,22,21,20,19,18,18,19,20,21,22,23,24,25,26,27,28,29,30,29,28,27,26,25,24,23,22,21,20,19,18,17,17,18,19,20,21,22,23,24,25,26,27,28,29,30,30,29,28,27,26,25,24,23,22,21,20,19,18,17,18,19,20,21,22,23,24,25,26,27,28,32,15,14,15,16,30,31,32,33,34,33,32,31,30,17,16,15,14,13,13,14,15,16,17,18,29,30,31,32,33,34,35,34,33,32,31,30,29,18,17,16,15,14,13,12,12,13,14,15,16,17,18,19,28,29,30,31,32,33,34,35,36,35,34,33,32,31,30,29,28,19,18,17,16,15,14,13,12,11,10,11,12,13,14,15,16,17,18,19,20,27,28,29,30,31,32,33,34,35,36,37,37,36,35,34,33,32,31,30,29,28,27,26,20,19,18,17,16,15,14,13,12,11,10,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,38,37,36,35,34,33,32,31,30,29,28,27,26,25,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,38,37,36,35,34,33,32,31,30,29,28,27,26,21,20,19,18,17,16,15,14,13,12,11,10,9,6,7,8,39,40,41,42,41,40,39,8,7,6,5,5,6,7,8,9,38,39,40,41,42,43,42,41,40,39,38,37,9,8,7,6,5,4,3,4,5,6,7,8,9,10,37,38,39,40,41,42,43,44,43,42,41,40,39,38,37,36,11,10,9,8,7,6,5,4,3,2,3,4,5,6,7,8,9,10,11,36,37,38,39,40,41,42,43,44,45,45,44,43,42,41,40,39,38,37,36,35,12,11,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12,35,36,37,38,39,40,41,42,43,44,45,46,46,45,44,43,42,41,40,39,38,37,36,35,34,13,12,11,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,34,35,36,37,38,39,40,41,42,43,44,45,46,47,47,46,45,44,43,42,41,40,39,38,37,36,35,34,13,12,11,10,9,8,7,6,5,4,3,2,1,0,2,4,5,6,7,9,10,11,12,18,20,22,24,26,28,35,36,38,39,40,41,43,44,45,30,29,28,27,26,25,24,23,22,21,20,19,18,17,17,18,29,30,30,29,18,17,18,28,29,28,19,18,19,20,27,28,27,20,20,21,26,27,26,21,21,22,25,26,25,24,23,22,22,23,24};
//const byte y_points3[] PROGMEM = {0,0,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,44,44,44,44,45,45,45,46,46,46,47,47,47,47,48,48,49,49,49,49,50,50,51,51,51,51,52,52,52,52,53,53,53};

const int NUM_POINTS_3 = 646;
const byte x_points3[] PROGMEM = {23,24,24,23,22,22,21,21,22,22,21,21,21,22,22,21,20,20,21,22,22,22,21,21,21,22,23,23,22,23,23,23,24,24,23,23,24,25,25,26,26,27,28,28,27,26,25,25,26,27,27,26,25,25,24,24,24,24,25,25,26,27,27,26,26,27,28,28,28,28,29,29,29,30,30,30,29,28,27,27,26,26,25,25,24,24,24,23,23,23,23,22,20,20,20,19,19,18,18,19,19,18,18,18,19,19,18,17,17,17,19,20,20,21,20,20,16,15,15,14,14,15,15,16,17,17,17,18,18,18,17,16,16,15,15,14,14,14,13,13,13,13,12,12,12,12,12,12,11,10,9,9,10,11,11,11,10,10,9,9,8,10,10,11,11,13,14,15,16,17,17,16,15,15,15,16,16,15,14,14,13,12,12,13,13,14,14,16,17,17,18,18,18,18,18,19,20,20,20,20,19,19,19,19,18,17,16,16,15,15,16,14,14,13,13,11,17,19,21,21,21,20,20,21,22,22,25,26,26,26,27,28,29,29,28,28,28,27,27,27,27,28,29,30,30,31,31,32,32,32,33,33,34,34,33,33,34,34,34,33,33,34,35,35,36,36,36,35,35,34,34,33,33,32,32,31,30,30,30,29,28,27,26,26,25,29,29,30,31,32,32,32,32,33,31,31,30,29,28,28,29,30,30,31,31,30,30,30,31,32,32,33,33,32,31,29,29,34,34,35,35,35,36,36,35,37,37,37,38,38,37,37,37,36,35,34,33,32,31,31,36,38,38,39,39,40,41,41,42,42,42,41,40,39,39,40,41,40,39,38,38,38,38,37,36,36,37,38,39,39,38,38,38,37,36,35,34,34,35,35,34,35,36,36,37,38,39,39,40,40,41,41,40,39,39,39,40,41,42,42,41,40,40,41,41,40,40,39,41,42,43,44,44,44,43,42,42,43,45,45,45,46,46,45,45,45,45,44,43,43,43,44,44,46,47,47,46,44,44,43,43,42,42,41,38,38,37,36,36,36,35,35,37,37,37,37,40,41,42,43,43,30,29,28,27,26,26,25,24,23,22,21,20,20,19,18,17,17,17,18,18,18,19,19,20,20,20,21,21,21,22,22,22,23,24,24,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,28,24,22,18,18,13,12,12,13,13,12,11,11,10,10,9,8,8,9,9,8,7,6,6,6,7,7,8,9,10,10,11,11,11,12,12,10,10,11,11,11,10,9,9,10,9,8,8,7,7,6,5,4,4,3,2,1,0,0,1,2,3,3,4,4,5,6,7,6,5,5,5,4,3,2,1,1,2,2,3,4,4,3,2,3,4,5,6,6,5,5,7,7,8,9,9,9,8,7,7,6,5,4,3,4,5,6,6,7,7,7,8,8,8,9,10,8,5,5,6,6,12,13,17,18,19,19,12,2,23,24,25,25,26};
const byte y_points3[] PROGMEM = {0,0,1,1,1,2,2,3,3,4,4,5,6,6,7,7,7,8,8,8,9,10,10,11,12,12,12,11,11,10,9,8,8,7,7,6,6,6,5,5,6,6,6,7,7,7,7,8,8,8,9,9,9,10,10,9,11,12,12,11,11,11,10,10,12,12,12,11,10,9,9,10,11,11,10,9,8,8,5,4,4,3,3,4,4,3,2,2,3,4,5,5,5,4,6,6,7,7,8,8,9,9,10,11,11,12,12,11,10,9,10,10,9,9,11,12,15,15,14,15,16,16,17,17,17,18,19,19,18,17,16,16,18,18,19,19,20,21,21,20,19,18,18,19,20,21,22,23,23,23,23,24,24,24,25,26,26,25,25,26,25,22,21,21,22,22,22,22,22,22,23,23,23,24,25,25,26,26,26,25,25,25,24,24,23,23,24,24,24,25,25,24,23,22,21,21,21,22,23,24,24,23,22,20,20,20,20,21,21,20,19,18,17,17,16,20,21,19,23,24,25,25,26,26,25,24,24,24,23,22,22,22,22,23,23,24,25,25,24,23,21,21,21,21,20,20,19,19,18,17,17,18,18,19,19,20,20,21,22,22,23,23,23,22,22,23,24,24,25,25,24,24,25,25,24,24,24,25,26,26,26,26,26,25,25,25,24,23,23,23,22,21,20,21,21,22,22,20,20,19,19,19,18,18,17,17,16,15,15,15,14,15,16,16,16,17,18,17,16,18,19,20,20,21,21,21,22,23,23,24,24,25,26,26,26,26,26,26,26,25,25,25,26,29,30,30,30,31,31,32,33,33,33,33,32,32,32,31,31,31,32,33,34,34,34,35,35,35,35,36,36,37,38,38,38,38,38,39,39,40,40,41,41,40,40,40,40,41,41,40,40,39,39,39,38,37,37,37,37,38,38,38,36,36,35,35,34,34,34,34,34,34,35,36,36,36,35,35,35,36,37,37,38,38,39,40,41,41,41,40,39,39,40,40,40,39,39,38,37,37,38,39,40,41,41,39,39,39,37,36,36,37,37,36,33,32,29,29,30,32,33,42,42,42,42,42,41,42,42,42,42,42,42,41,42,42,42,43,44,44,45,46,46,47,47,48,49,49,50,51,51,52,53,53,53,52,52,51,51,50,49,49,48,47,47,46,45,45,44,43,43,44,41,41,41,41,43,40,40,39,39,38,38,38,37,37,36,36,36,37,37,38,38,38,38,37,36,36,35,35,35,35,34,34,35,36,36,37,38,39,39,40,41,41,41,40,40,39,39,40,40,41,41,41,41,40,40,40,40,40,39,39,39,39,38,38,39,39,39,39,40,40,38,37,37,37,37,37,38,38,36,36,36,35,35,35,34,34,34,34,35,35,36,37,34,34,34,33,32,32,32,33,33,33,33,33,32,32,32,31,31,30,29,29,30,31,31,33,33,31,30,30,29,26,26,26,26,26,25,41,41,52,5,2,1,2};


// Enemy
//const int NUM_POINTS_5 = 170;
//const byte x_points5[] PROGMEM = {27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,9,8,8,8,8,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,10,11,12,13,14,15,16,17,17,18,19,20,20,21,22,23,23,23,24,24,25,26,27,27,27,27,27,27,27,27,27,26,26,26,25,25,25,25,25,24,23,23,22,21,20,19,18,17,16,15,14,13,12,10,10,9,8,9,10,11,12,12,12,12,12,12,12,13,14,14,14,14,14,15,17,18,19,20,20,21,22,22,22,22,22,21,20,20,19,18,17,17,17,17,16,16,17,18,18,18,19,19,20,19,18,18,18,18,17,16,15,15,14,14,14,14,14,14,15,15,16,16,16,17,17,17,18};
//const byte y_points5[] PROGMEM = {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,23,24,25,26,27,29,30,31,32,31,30,30,30,29,29,29,29,29,29,30,30,31,31,32,32,32,32,31,30,30,29,29,29,29,28,27,26,25,24,23,22,21,21,20,19,18,17,16,15,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,15,16,17,18,19,20,20,21,22,23,24,25,25,25,25,25,25,24,24,23,22,21,20,19,19,18,17,17,18,18,19,20,21,21,22,22,22,21,20,19,18,17,17,17,18,19,20,20,20,19,18,18,19,20,21,22,23,23,24,24,23,22,22,21,22,22};

const int NUM_POINTS_5 = 242;
const byte x_points5[] PROGMEM = {8,26,28,27,9,7,7,9,27,29,24,12,10,12,24,25,23,11,7,10,12,15,19,23,25,28,27,25,23,21,19,17,15,13,11,9,7,8,10,12,14,16,18,20,22,24,26,28,29,27,25,23,21,19,17,15,13,11,9,7,3,5,7,9,14,16,18,20,22,27,29,31,32,30,28,26,21,19,17,15,13,8,6,4,3,5,7,9,14,16,18,20,22,27,29,31,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1,0,2,6,8,10,12,14,16,18,20,22,24,26,28,32,34,35,33,27,25,23,21,19,17,15,13,11,9,7,1,0,2,8,10,12,14,16,18,20,22,24,26,28,33,35,34,28,26,23,19,15,11,8,6,1,0,2,8,26,28,33,35,34,28,26,8,6,1,0,2,8,26,28,34,25,23,21,15,13,11,10,12,14,20,22,24,25,23,21,15,13,11};
const byte y_points5[] PROGMEM = {0,0,0,1,1,1,2,2,2,2,3,3,4,4,4,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25};


//Laser
const int NUM_POINTS_4 = 8;
const byte x_points4[] PROGMEM = {0,0,0,0,0,0,0,0};
const byte y_points4[] PROGMEM = {0,1,2,3,4,5,6,7};

const byte numObjects = 3;
byte *objectX[numObjects] = {x_points3, x_points4, x_points5}; 
byte *objectY[numObjects] = {y_points3, y_points4, y_points5};
int objectNumPoints[numObjects] = {NUM_POINTS_3, NUM_POINTS_4, NUM_POINTS_5}; 
byte currentObject = 0;
int currentLaser = 0;

///////////
int Scale(int valToScale)
{
  return ((valToScale >> 1) - 256);
}
//////////////
bool DrawPoint(int x, int y)
{
  if ((x >= 0 && x < 256) && (y >= 0 && y < 256)) 
  {

    byte cbyte = byte((PORTC & B001111) | ((y & B00000011) << 4));
    byte bbyte = byte((y >> 2) & B00111111);

    PORTD = byte(x); // Port D is the 8 bits of x 
    PORTC = cbyte; // Map the 2 LSbs of y to port C pins 4-5
    PORTB = bbyte; // Map the 6 MSbs of y to Port B pins 0-5
    
    //delayMicroseconds(FIGURE_DELAY);
  }
}
////////
bool DrawObject(byte *xZero, byte *yZero, int xOffset, int yOffset, int numPoints, bool isProgMem)
{
    // Pass a pointer to the start of the array of points, plus the number of points. 
    // Assumes points are bytes but should probably generalise this.
  if(!DEBUG) 
  {
    if(isProgMem) // If points are stored in program memory rather than RAM
    {
      int x, y;
      for (int t=0; t < numPoints; t++) // run through points 
      { 
        x = (pgm_read_byte_near(xZero + t) + xOffset); 
        y = (pgm_read_byte_near(yZero + t) + yOffset); 
        DrawPoint(x,y);
      }

      return(true);
    }
    else
    {
      //Treat as normal array in RAM. (To Do)
      return(false);
    }
  }
}

bool ButtonPress(int i)
{
  bool isPressed = false;
  buttons[i].currentState = digitalRead(buttons[i].pin);
  if (buttons[i].currentState == HIGH && buttons[i].lastState == LOW) isPressed = true;
  buttons[i].lastState = buttons[i].currentState;
  return(isPressed);
}

void initialiseEnemies()
{
  for (byte i = 0; i < NUM_ENEMIES; i++)
  {
    enemies[i].x = (i % 4) * 64;
    enemies[i].y = (i / 4) * 32;
    enemies[i].active = true;
    enemies[i].width = 27;
  } 
}

///////////////////////////////////////////////////////////////////////////////////////////////
void setup(){
  
  Serial.end(); //Ensure the debug port is not active
  // initialize port D and B, and two pins on Port C for digital output
  DDRD = B11111111; 
  DDRB = DDRB | B00111111; // Keep the state of the top two pins (not sure if it matters)
  pinMode(A5, OUTPUT);
  pinMode(A4, OUTPUT);
  // Set up the pin for the reset button
  pinMode(RESET_BUTTON, INPUT);
  digitalWrite(RESET_BUTTON,LOW);
  randomSeed(analogRead(A3));
  

  for (byte i = 0; i < NUM_LASERS; i++)
  {
    laser[i].x = 0;
    laser[i].y = 0;
    laser[i].active = false;
  }

  initialiseEnemies();

  unsigned long startTime = 0;
  int max_points = 0;
  int x = 0; 
  int y = 0;

  //Draw the spash screen,bit by bit so it looks like it's beeing drawn by hand
  //Once drawn, show the picture for SPLASH_TIME
  while ((max_points < NUM_POINTS) || (millis() < startTime)) 
  {
    if(max_points < NUM_POINTS) 
    {
      max_points += 1;
      if (max_points >= NUM_POINTS - 2) startTime = millis() + SPLASH_TIME; 
    }
    for (int t=0; t < max_points; t++)// run through points
    { 
      x = (pgm_read_byte_near(x_points + t));
      y = (pgm_read_byte_near(y_points + t));
      DrawPoint(x,y);
    }
  }

  if(DEBUG) Serial.begin(9600); //Debug mode. Serial port can only be used if not outputting data to scope 

}
////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop(){
  int y = 255;
  while (millis() < nextFrame) 
  {
    for (int x=0; x<256; x++) 
    {
      DrawPoint(x,y);
    } 


  }
  nextFrame = millis() + FRAME_TIME; // If it takes longer than a frame to complete a sequence, make sure nextFrame doesn't get left behind

  int x_offset = Scale(analogRead(X_INPUT));
  int y_offset = Scale(analogRead(Y_INPUT));
  
  //if(ButtonPress(0)) currentObject = (currentObject + 1) % numObjects; 
  if(ButtonPress(0)) 
  {
    laser[currentLaser].y = 0;
    laser[currentLaser].x = x_offset + 23;
    laser[currentLaser].active = true;
    currentLaser = (currentLaser + 1) % NUM_LASERS;
  }

  //Draw rocket
  DrawObject(objectX[currentObject], objectY[currentObject], x_offset, y_offset, objectNumPoints[currentObject], true);

  //DrawObject(objectX[4], objectY[4], enemies[0].x, enemies[0].y, objectNumPoints[4], true);

  for (byte i = 0; i < NUM_ENEMIES; i++)
  {
    if (enemies[i].active) 
    {
      DrawObject(objectX[2], objectY[2], enemies[i].x, enemies[i].y, objectNumPoints[2], true);
      enemies[i].y = (enemies[i].y + random(0,3)) % 256;
      enemies[i].x = enemies[i].x + random(-2,3);
      if (enemies[i].x < 0 || enemies[i].x > 254) 
      {
        enemies[i].x = random(23) * 10; 
        enemies[i].y = 0;    
      }
    }
  }

  //Draw lasers
  for (byte i = 0; i < NUM_LASERS; i++)
  {
    if (laser[i].active) 
    {
      DrawObject(objectX[1], objectY[1], laser[i].x, y_offset - laser[i].y, objectNumPoints[1], true);
      if (laser[i].y++ > 254) laser[i].active = false;
    }
  }

  //test for collision
  byte activeEnemies = 0;
  bool hit = false;
  for (byte i = 0; i < NUM_ENEMIES; i++)
  {
    if (enemies[i].active == true)
    {
      activeEnemies++;
      for (byte j = 0; j < NUM_LASERS; j++)
      {
        if (laser[j].active == true)
        {
          if ((laser[j].x > enemies[i].x) && (laser[j].x < (enemies[i].x + enemies[i].width)) && 
             (y_offset - laser[j].y > enemies[i].y) && (y_offset -laser[j].y < enemies[i].y + 20))
          {
             enemies[i].active = false;
             laser[j].active = false;
          }
        }
      }
      // collision with rocket detection to go here
      if ((enemies[i].y + 20 > y_offset) && (enemies[i].x + enemies[i].width > x_offset) && (enemies[i].x < x_offset + 48))
      {
        hit = true;
      }
         
    }
  }
  if (activeEnemies == 0 || hit == true) initialiseEnemies(); 
}
